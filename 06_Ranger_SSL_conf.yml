- set_fact:
    general_configpy_args: "--host={{ inventory_hostname|lower }} --port=8443 --protocol=https --action=set --cluster={{ hostvars[inventory_hostname].cluster_name }} --user={{ ambari_admin_user }} --password={{ ambari_admin_password }} --unsafe "
  when: "'AMBARI_SERVER' in group_names"

- name: Configure SSL for admin-properties
  shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=admin-properties --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
  with_items:
    - { key: "policymgr_external_url", value: "https://{{ inventory_hostname|lower }}:6182" } 
  when: "'AMBARI_SERVER' in group_names"

- name: Configure SSL for ranger-admin-site
  shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-admin-site --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
  with_items:
    - { key: "ranger.service.http.enabled", value: "false" } 
    - { key: "ranger.truststore.alias", value: "rootca" } 
    - { key: "ranger.truststore.file", value: "/etc/security/serverKeys/jks/truststore.jks" } 
    - { key: "ranger.truststore.password", value: "{{ security_password }}" } 
    - { key: "ranger.https.attrib.keystore.file", value: "/etc/security/serverKeys/jks/keystore.jks" } 
    - { key: "ranger.service.https.attrib.keystore.keyalias", value: "{{ inventory_hostname|lower }}" } 
    - { key: "ranger.service.https.attrib.keystore.pass", value: "{{ security_password }}" } 
    - { key: "ranger.service.https.attrib.clientAuth", value: "false" } 
    - { key: "ranger.service.https.attrib.ssl.enabled", value: "true" } 
    - { key: "ranger.service.https.port", value: "{{ ldap_port }}" } 
    - { key: "ranger.service.https.attrib.keystore.file", value: "/etc/security/serverKeys/jks/keystore.jks" } 
    - { key: "ranger.service.https.attrib.client.auth", value: "false" } 
    - { key: "ranger.authentication.method", value: "ACTIVE_DIRECTORY" } 
    - { key: "ranger.ldap.ad.domain", value: "{{ ldap_domain }}" } 
    - { key: "ranger.ldap.ad.base.dn", value: "{{ ldap_user_DNs }}" } 
    - { key: "ranger.ldap.ad.referral", value: "follow" } 
    - { key: "ranger.ldap.ad.user.searchfilter", value: '\{\{ranger_ug_ldap_user_searchfilter\}\}' } 
    - { key: "ranger.ldap.ad.bind.password", value: "{{ ldap_ou_admin_password }}" } 
    - { key: "ranger.audit.solr.urls", value: "https://{{ inventory_hostname }}:8886/solr/ranger_audits" } 
  when: "'AMBARI_SERVER' in group_names"

- name: Configure SSL for ranger-ugsync-site
  shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-ugsync-site --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
  with_items:
    - { key: "ranger.usersync.truststore.file", value: "/etc/security/serverKeys/jks/truststore.jks" } 
    - { key: "ranger.usersync.truststore.password", value: "{{ security_password }}" } 
    - { key: "ranger.usersync.source.impl.class", value: "org.apache.ranger.ldapusersync.process.LdapUserGroupBuilder" } 
    - { key: "ranger.usersync.ldap.url", value: "{{ ldap_url }}" } 
    - { key: "ranger.usersync.ldap.binddn", value: "{{ ldap_ou_admin_user_dn }}" } 
    - { key: "ranger.usersync.ldap.ldapbindpassword", value: '{{ ldap_ou_admin_password }}' } 
    - { key: "ranger.usersync.ldap.deltasync", value: "false" } 
    - { key: "ranger.usersync.ldap.user.nameattribute", value: "{{ ldap_user_name_attribute }}" } 
    - { key: "ranger.usersync.ldap.user.searchbase", value: "{{ ldap_user_DNs }}" } 
    - { key: "ranger.usersync.ldap.user.groupnameattribute", value: "{{ ldap_user_groupname_attribute }}" } 
    - { key: "ranger.usersync.group.memberattributename", value: "{{ ldap_group_member_attribute }}" } 
    - { key: "ranger.usersync.group.nameattribute", value: "{{ ldap_group_name_attribute }}" } 
    - { key: "ranger.usersync.group.objectclass", value: "{{ ldap_group_object_class }}" } 
    - { key: "ranger.usersync.group.searchbase", value: "{{ ldap_group_DNs }}" } 
  when: "'AMBARI_SERVER' in group_names"

- name: Configure Ranger Admin credentials
  shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-env --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
  with_items:
    - { key: "ranger_admin_username", value: "{{ ranger_admin_user }}" }
    - { key: "ranger_admin_password", value: "{{ ranger_admin_password }}" }
    - { key: "admin_password", value: "{{ ranger_admin_password }}" }
  when: "'AMBARI_SERVER' in group_names"

- name: Fix permissions on file /etc/ranger/admin/.rangeradmin.jceks.crc
  file:
    path: /etc/ranger/admin/.rangeradmin.jceks.crc
    owner: ranger
    group: ranger
  when: "'AMBARI_SERVER' in group_names"

- name: Restart all services with stale configuration
  uri:
    url: https://{{ inventory_hostname }}:8443/api/v1/clusters/{{ hostvars[inventory_hostname].cluster_name }}/requests
    method: POST
    validate_certs: no
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"text/plain"}'
    body: {"RequestInfo":{"context":"Restart all services with stale configuration via REST","operational_level": "host_component","command": "RESTART"},"Requests/resource_filters": [{"hosts_predicate": "HostRoles/stale_configs=true&HostRoles/cluster_name={{ hostvars[inventory_hostname].cluster_name }}"}]}
    body_format: json
    timeout: 120
    return_content: yes
    status_code: 200,201,202
  register: returned_from_cluster
  until: returned_from_cluster.status == 202
  retries: 300
  delay: 1
  when: "'AMBARI_SERVER' in group_names"

- name: Waiting for all services will restart
  uri:
    url: "{{ returned_from_cluster.json.href }}"
    validate_certs: no
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
  register: cluster_check_task
  until: (((cluster_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task.content|from_json).Requests.completed_task_count|int > 0))
  retries: 600
  delay: 1
  when: "'AMBARI_SERVER' in group_names"
