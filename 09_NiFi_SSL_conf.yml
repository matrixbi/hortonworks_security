- set_fact:
    general_configpy_args: "--host={{ inventory_hostname|lower }} --port=8443 --protocol=https --action=set --cluster={{ hostvars[inventory_hostname].cluster_name }} --user={{ ambari_admin_user }} --password={{ ambari_admin_password }} --unsafe"
  when: "'AMBARI_SERVER' in group_names"

- name: Enable nifi-plugin in ranger
  block:
    - shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-env --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
      with_items:
        - { key: "ranger-nifi-plugin-enabled", value: "Yes" }

    - shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-nifi-plugin-properties --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
      with_items:
        - { key: "ranger-nifi-plugin-enabled", value: "Yes" }
  when: "'AMBARI_SERVER' in group_names"

- name: Restart all services with stale configuration
  uri:
    url: https://{{ inventory_hostname }}:8443/api/v1/clusters/{{ hostvars[inventory_hostname].cluster_name }}/requests
    method: POST
    validate_certs: no
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"text/plain"}'
    body: {"RequestInfo":{"context":"Restart all services with stale configuration via REST","operational_level": "host_component","command": "RESTART"},"Requests/resource_filters": [{"hosts_predicate": "HostRoles/stale_configs=true&HostRoles/cluster_name={{ hostvars[inventory_hostname].cluster_name }}"}]}
    body_format: json
    timeout: 120
    return_content: yes
    status_code: 200,201,202
  register: returned_from_cluster
  until: returned_from_cluster.status == 202
  retries: 300
  delay: 1
  when: "'AMBARI_SERVER' in group_names"

- name: "Waiting for all services will restart"
  uri:
    url: "{{ returned_from_cluster.json.href }}"
    validate_certs: no
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
  register: cluster_check_task
  until: (((cluster_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task.content|from_json).Requests.completed_task_count|int > 0))
  retries: 600
  delay: 1
  when: "'AMBARI_SERVER' in group_names"

- name: Create new users in Ranger via REST API
  uri:
    url: https://{{ inventory_hostname }}:6182/service/xusers/secure/users
    method: POST
    validate_certs: no
    force_basic_auth: yes
    user: "{{ ranger_admin_user }}"
    password: "{{ ranger_admin_password }}"
    headers: '{"Accept":"application/json", "Content-Type":"application/json"}'
    body: {"name":"{{ item }}","loginId":"{{ item }}","password":"{{ default_ranger_user_password }}","firstName":"{{ item }}","userRoleList":[ "ROLE_USER" ]}
    body_format: json
    timeout: 120
    return_content: yes
    status_code: 200
  with_items:
    - "{{ ansible_play_batch | intersect(groups.NIFI) | lower }}"
  when: "'AMBARI_SERVER' in group_names"

- name: Create new policy in Ranger via REST API
  uri:
    url: https://{{ inventory_hostname }}:6182/service/public/v2/api/policy
    method: POST
    validate_certs: no
    force_basic_auth: yes
    user: "{{ ranger_admin_user }}"
    password: "{{ ranger_admin_password }}"
    headers: '{"Accept":"application/json", "Content-Type":"application/json"}'
    body: {"isAuditEnabled": true,"isEnabled": true,"name":"Proxy host access","resources":{"nifi-resource":{"isExcludes":false,"isRecursive":false,"values":["/proxy","/controller"]}},"service":"{{ nifi_policy_name }}","version":1,"policyItems":[{"users":"{{ ansible_play_batch | difference(groups.AMBARI_SERVER) | lower }}","accesses":[{"isAllowed":true,"type":"READ"},{"isAllowed":true,"type":"WRITE"}]}]}
    body_format: json
    timeout: 120
    return_content: yes
    status_code: 200
  when: "'AMBARI_SERVER' in group_names"

- name: "Create copy the existing keystores and change the alias of the key"
  block:
    - copy:
        remote_src: yes
        src: /etc/security/serverKeys/jks/{{ item }}.jks
        dest: /etc/security/serverKeys/jks/nifi_{{ item }}.jks
      with_items:
        - keystore
        - truststore
    - shell: "keytool -changealias -keystore /etc/security/serverKeys/jks/nifi_keystore.jks -alias {{ inventory_hostname|lower }} -destalias nifi-key -storepass {{ security_password }}"

- name: "Configure SSL for NiFi"
  block:
    - shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=nifi-ambari-config --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
      with_items:
        - { key: "nifi.allow.explicit.keytab", value: "false" }
    - shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=nifi-ambari-ssl-config --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
      with_items:
        - { key: "nifi.security.keyPasswd", value: "{{ security_password }}" }
        - { key: "nifi.node.ssl.isenabled", value: "true" }
        - { key: "nifi.security.keystore", value: "/etc/security/serverKeys/jks/nifi_keystore.jks" }
        - { key: "nifi.security.keystoreType", value: "jks" }
        - { key: "nifi.security.keystorePasswd", value: "{{ security_password }}" }
        - { key: "nifi.security.truststore", value: "/etc/security/serverKeys/jks/nifi_truststore.jks" }
        - { key: "nifi.security.truststoreType", value: "jks" }
        - { key: "nifi.security.truststorePasswd", value: "{{ security_password }}" }
        #- { key: "nifi.initial.admin.identity", value: "{{ ldap_ou_admin_user_dn }}" }
        - { key: "nifi.toolkit.dn.suffix", value: ",OU=NIFI" }
  
    - shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=nifi-properties --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
      with_items:
        - { key: "nifi.security.identity.mapping.pattern.dn", value: "'^CN=(.*)$'" }
        - { key: "nifi.security.identity.mapping.pattern.kerb", value: "'^(.*?)@(.*?)$'" }
        - { key: "nifi.security.identity.mapping.value.dn", value: "'$1'" }
        - { key: "nifi.security.identity.mapping.value.kerb", value: "'$1'" }
        - { key: "nifi.remote.input.http.enabled", value: "false" }

    - shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-nifi-policymgr-ssl --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
      with_items:
        - { key: "xasecure.policymgr.clientssl.keystore", value: "/etc/security/serverKeys/jks/nifi_keystore.jks" }
        - { key: "xasecure.policymgr.clientssl.keystore.password", value: "{{ security_password }}" }
        - { key: "xasecure.policymgr.clientssl.truststore", value: "/etc/security/serverKeys/jks/nifi_truststore.jks" }
        - { key: "xasecure.policymgr.clientssl.truststore.password", value: "{{ security_password }}" }

    - shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-nifi-plugin-properties --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
      with_items:
        - { key: "ranger-nifi-plugin-enabled", value: "Yes" }
        - { key: "nifi.authentication", value: "SSL" }
  when: "'AMBARI_SERVER' in group_names"

- name: Restart all services with stale configuration
  uri:
    url: https://{{ inventory_hostname }}:8443/api/v1/clusters/{{ hostvars[inventory_hostname].cluster_name }}/requests
    method: POST
    validate_certs: no
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"text/plain"}'
    body: {"RequestInfo":{"context":"Restart all services with stale configuration via REST","operational_level": "host_component","command": "RESTART"},"Requests/resource_filters": [{"hosts_predicate": "HostRoles/stale_configs=true&HostRoles/cluster_name={{ hostvars[inventory_hostname].cluster_name }}"}]}
    body_format: json
    timeout: 120
    return_content: yes
    status_code: 200,201,202
  register: returned_from_cluster
  until: returned_from_cluster.status == 202
  retries: 300
  delay: 1
  when: "'AMBARI_SERVER' in group_names"

- name: "Waiting for all services will restart"
  uri:
    url: "{{ returned_from_cluster.json.href }}"
    validate_certs: no
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
  register: cluster_check_task
  until: (((cluster_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task.content|from_json).Requests.completed_task_count|int > 0))
  retries: 600
  delay: 1
  when: "'AMBARI_SERVER' in group_names"
